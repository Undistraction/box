@include describe("box-process-multiple-values") {

  @include describe("with a united value of a") {

    @include it("should return a a a a") {
      @include should(
        expect(
          box-process-multiple-values(1px)
        ),
        to( equal(
          1px 1px 1px 1px
        ))
      );
    }
  }

  @include describe("with a united value of a b") {

    @include it("should return a b a b") {
      @include should(
        expect(
          box-process-multiple-values(1px 2px)
        ),
        to( equal(
          1px 2px 1px 2px
        ))
      );
    }
  }

  @include describe("with a united value of a b c") {

    @include it("should return a b c b") {
      @include should(
        expect(
          box-process-multiple-values(1px 2px 3px)
        ),
        to( equal(
          1px 2px 3px 2px
        ))
      );
    }
  }

  @include describe("with a united value of a b c d") {

    @include it("should return a b c d") {
      @include should(
        expect(
          box-process-multiple-values(1px 2px 3px 4px)
        ),
        to( equal(
          1px 2px 3px 4px
        ))
      );
    }
  }

  // Errors
  // -----------------------------------------------------------------------------------------------

  @include describe("if a property is passed that isnt supported") {
    @include it("should throw a box-unsupported-key-error") {
      @include reset-errors();
      $result: box-process-arbitrary-value(xxx, 1px);
      @include should(
        expect(
          $box-last-error
        ),
        to( equal(
          $box-unsupported-key-error
        ))
      );
    }
  }

  @include describe("if a value is passed that isnt supported") {

    @include it("should throw a box-unsupported-value-error") {
      @include reset-errors();
      $result: box-process-multiple-values(xxx xxx);
      @include should(
        expect(
          $box-last-error
        ),
        to( equal(
          $box-unsupported-value-error
        ))
      );
    }
  }

}