////
/// @author Pedr Browne
/// @group API
/// @access public
////

/// Render the supplied box-properties.
///
/// @param {Map} $map
///  Map of box properties. The following properties / keys are supported:
///
///  - margin
///  - margin-top
///  - margin-right
///  - margin-bottom
///  - margin-left
///  - border
///  - border-top
///  - border-right
///  - border-bottom
///  - border-left
///  - padding
///  - padding-top
///  - padding-right
///  - padding-bottom
///  - padding-left
///
/// @output
///  The supplied properties.
///
/// @example scss - Usage
///  .element {
///    @include box(
///      (
///        margin: 5px,
///        padding: 20px,
///        padding-left: 2px,
///        border: 2px 3px 2px
///      )
///    );
///  }
///
/// @example css - CSS Output
///  .element {
///    margin: 5px;
///    padding: 20px;
///    padding-left: 2px;
///    border: 2px 3px 2px;
///  }
///
@mixin box($map) {
  @each $key, $value in $map {
    #{$key}: #{box-process-arbitrary-value($key, $value)};
  }
}


/// Render `left` and `right` `margins` with the supplied value.
///
/// @param {String} $value
///  The value(s) for the margins.
///
/// @output
///  The `margin` properties and values.
///
@mixin h-margins($values) {
  @include opposing-properties(margin, horizontal, $values);
}

/// Render `top` and `bottom` `margins` with the supplied value.
///
/// @param {String} $values
///  The value(s) for the margins.
///
/// @output
///  The `margin` properties and values.
///
@mixin v-margins($values) {
  @include opposing-properties(margin, vertical, $values);
}

/// Render `left` and `right` `borders` with the supplied value.
///
/// @param {String} $values
///  The value(s) for the borders.
///
/// @output
///  The `border` properties and values.
///
@mixin h-borders($values) {
  @include opposing-properties(border, horizontal, $values);
}

/// Render `top` and `bottom` `borders` with the supplied value.
///
/// @param {String} $values
///  The value(s) for the borders.
///
/// @output
///  The `border` properties and values.
///
@mixin v-borders($values) {
  @include opposing-properties(border, vertical, $values);
}

/// Render `top` and `bottom` `padding` with the supplied value.
///
/// @param {String} $values
///  The value(s) for the padding.
///
/// @output
///  The `padding` properties and values.
///
@mixin h-padding($values) {
  @include opposing-properties(padding, horizontal, $values);
}

/// Render `left` and `right` `padding` with the supplied value.
///
/// @param {String} $values
///  The value(s) for the padding.
///
/// @output
///  The `padding` properties and values.
///
@mixin v-padding($values) {
  @include opposing-properties(padding, vertical, $values);
}

/// Render the supplied margin.
///
/// @param {String} $value
///  The `margin` value.
///
/// @output
///  The `margin` property and value.
///
@mixin margin($value) {
  margin: box-process-multiple-values($value);
}

/// Render the supplied margin-top.
///
/// @param {String} $value
///  The `margin-top` value.
///
/// @output
///  The `margin-top` property and value.
///
@mixin margin-top($value) {
  margin-top: box-process-single-value($value, vertical);
}

/// Render the supplied margin-right.
///
/// @param {String} $value
///  The `margin-right` value.
///
/// @output
///  The `margin-right` property and value.
///
@mixin margin-right($value) {
  margin-right: box-process-single-value($value, horizontal);
}

/// Render the supplied margin-bottom.
///
/// @param {String} $value
///  The `margin-bottom` value.
///
/// @output
///  The `margin-bottom` property and value.
///
@mixin margin-bottom($value) {
  margin-bottom: box-process-single-value($value, vertical);
}

/// Render the supplied margin-left.
///
/// @param {String} $value
///  The `margin-left` value.
///
/// @output
///  The `margin-left` property and value.
///
@mixin margin-left($value) {
  margin-left: box-process-single-value($value, horizontal);
}

/// Render the supplied padding.
///
/// @param {String} $value
///  The `padding` value.
///
/// @output
///  The `padding` property and value.
///
@mixin padding($value) {
  padding: box-process-multiple-values($value);
}

/// Render the supplied padding-top.
///
/// @param {String} $value
///  The `padding-top` value.
///
/// @output
///  The `padding-top` property and value.
///

@mixin padding-top($value) {
  padding-top: box-process-single-value($value, vertical);
}

/// Render the supplied padding-right.
///
/// @param {String} $value
///  The `padding-right` value.
///
/// @output
///  The `padding-right` property and value.
///
@mixin padding-right($value) {
  padding-right: box-process-single-value($value, horizontal);
}

/// Render the supplied padding-bottom.
///
/// @param {String} $value
///  The `padding-bottom` value.
///
/// @output
///  The `padding-bottom` property and value.
///
@mixin padding-bottom($value) {
  padding-bottom: box-process-single-value($value, vertical);
}

/// Render the supplied padding-left.
///
/// @param {String} $value
///  The `padding-left` value.
///
/// @output
///  The `padding-left` property and value.
///
@mixin padding-left($value) {
  padding-left: box-process-single-value($value, horizontal);
}

/// Render the supplied border.
///
/// @param {String} $value
///  The `border` value.
///
/// @output
///  The `border` property and value.
///
@mixin border($value) {
  border: box-process-multiple-values($value);
}

/// Render the supplied border-top.
///
/// @param {String} $value
///  The `border-top` value.
///
/// @output
///  The `border-top` property and value.
///
@mixin border-top($value) {
  border-top: box-process-single-value($value, vertical);
}

/// Render the supplied border-right.
///
/// @param {String} $value
///  The `border-right` value.
///
/// @output
///  The `border-right` property and value.
///
@mixin border-right($value) {
  border-right: box-process-single-value($value, horizontal);
}

/// Render the supplied border-bottom.
///
/// @param {String} $value
///  The `border-bottom` value.
///
/// @output
///  The `border-bottom` property and value.
///
@mixin border-bottom($value) {
  border-bottom: box-process-single-value($value, vertical);
}

/// Render the supplied border-left.
///
/// @param {String} $value
///  The `border-left` value.
///
/// @output
///  The `border-left` property and value.
///
@mixin border-left($value) {
  border-left: box-process-single-value($value, horizontal);
}

/// Render a pair of box properties for the supplied orientation.
///
/// @param {String} $property
///  The name of the box-property ( margin | padding | border )
///
/// @param {String} $orientation
///   The orientation of the property-pair ( horizontal | vertical )
///
/// @param {String} $values
///   The values for the property-pair
///
/// @output
///  The `margin` property and value.
///
/// @throws
///   $box-argument-count-error
///
@mixin opposing-properties($property, $orientation, $values) {
  $count: length($values);
  $first-value: nth($values, 1);
  $second-value: null;
  @if $count == 1 {
    $second-value: $first-value;
  }@else if $count == 2 {
    $second-value: nth($values, 2);
  }@else {
    $error: box-throw-error($box-argument-count-error, "opposing-properties accepts either 1 or 2 $values, but you supplied #{$count}")
  }

  $sides: box-sides-for-orientation($orientation);
  @include box(
    (
      #{$property}-#{ nth($sides, 1)}: $first-value,
      #{$property}-#{ nth($sides, 2)}: $second-value
    )
  );
}