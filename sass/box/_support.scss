$box-orientations: horizontal vertical;
$box-valid-unitless-values:  auto initial inherit 0;
$box-valid-multiple-properties:  margin padding border;
$box-valid-single-properties:  margin-top
                              margin-right
                              margin-bottom
                              margin-left
                              padding-top
                              padding-right
                              padding-bottom
                              padding-left
                              border-top
                              border-right
                              border-bottom
                              border-left;

$box-valid-properties: join($box-valid-multiple-properties, $box-valid-single-properties);

// Errors
$box-argument-count-error: "Box Argument Count Error";
$box-unsupported-key-error: "Box Unsupported Key Error";
$box-unsupported-value-error: "Box Unsupported Value Error";
$box-last-error: null;
$box-under-test: false;

/**
 * By default, this function will throw a Sass error, but allows errors to be stopped during testing,
 * with the error saved to `$pos-last-error` instead so tests can check it was thrown.
 * @param {String} $error The name of the error
 * @param {String} $message The error message
 * @returns {Map} A map of offsets to be rendered as CSS properties
 * @access private
 */
@function box-throw-error($error, $message) {
  @if $box-under-test {
    $box-last-error: $error !global;
  } @else {
    @error "#{$error} #{$message}";
  }
  @return null;
}

@function box-process-arbitrary-value($key, $value) {
  @if box-is-valid-property($key) {
    @if box-is-single-property($key) {
      @if length($value) == 1 {
        $orientation: box-orientation-of-property($key);
        @return box-process-single-value($value, $orientation);
      } @else {
        @return box-throw-error($box-argument-count-error, "#{$key} only supports a single value, but value was `#{$value}`");
      }
    } @else {
      @return box-process-multiple-values($value);
    }
  } @else {
    @return box-throw-error($box-unsupported-key-error, "#{$key} is not a supported value");
  }
}

// Process value if it isn't already a valid number
@function box-process-single-value($value, $orientation) {
  @if box-should-parse-value($value) {
    $value: box-parse-value-filter($value, $orientation);
  }
  @return $value;
}

@function box-process-multiple-values($values) {
  $values: box-process-to-four-values($values);
  $processed-values: ();
  $orientation: null;
  @for $i from 1 through length($values) {
    $value: nth($values, $i);
    @if even($i) {
      $orientation: horizontal;
    } @else {
      $orientation: vertical;
    }
    @if box-should-parse-value($value) {
      $value: box-parse-value-filter($value, $orientation);
    }
    $processed-values: append($processed-values, $value);
  }
  @return $processed-values;
}

// Process all value lists to four values to make processing easy.
@function box-process-to-four-values($values) {
  $length: length($values);
  // Convert all values to 4 values
  @if $length < 4 {
    @if length($values) == 3 {
      // (T,L+R,B) We need to add the 2nd prop again as the last prop
      $values: append($values, nth($values, 2));
    } @else if $length == 2 {
      // (T+B, L+R) We need to duplicate
      $values: join($values, $values);
    } @else {
      // (T+R+B+L) We need to duplicate 4 times
      $values: append( append(append($values, nth($values, 1)), nth($values, 1)), nth($values, 1));
    }
  }
  @return $values;
}

@function box-parse-value-filter($value, $orientation) {
  @return box-throw-error($box-unsupported-value-error, "Unsupported value #{$value}");
}

// Check if value is even
@function even($number) {
  @return $number % 2 == 0;
}

// Does the value need to be parsed ?
@function box-should-parse-value($value) {
  @return not( box-is-number-with-unit($value)
            or box-is-valid-unitless($value)
            or box-is-calc($value));
}

@function box-is-calc($value) {
 @return str-slice($value + "", 1, 4) == "calc";
}

@function box-is-valid-unitless($value) {
  @return not not index($box-valid-unitless-values, $value);
}

@function box-is-number-with-unit($value) {
  @return (type-of($value) == number and not unitless($value));
}

@function box-is-valid-property($value) {
  @return not not index($box-valid-properties, $value);
}

@function box-is-single-property($value) {
  @return not not index($box-valid-single-properties, $value);
}

@function box-orientation-of-property($value) {
  $direction: str-slice($value, str-index($value, '-') + 1);
  @if not not index(left right, $direction) {
    @return horizontal;
  } @else {
    @return vertical;
  }
}